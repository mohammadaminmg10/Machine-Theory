from dfa import Dfa

class RegularExpressionAnalyzer:
    def __init__(self):
        pass

    def is_regular(self, expression):
        #Q1
        """
        Check if the given expression is a regular expression.
        
        :param expression: The input regular expression.
        :return: True if the expression is a regular expression, False otherwise.
        """

    def to_nfa(self, expression):
        #Q2
        """
        Convert a regular expression to a NFA.

        :param expression: The input regular expression.
        :return: An NFA representing the given regular expression.
        """

    def to_dfa(self, expression):
        #Q2
        """
        Convert a regular expression to a DFA.

        :param expression: The input regular expression.
        :return: A DFA representing the given regular expression.
        """

    def compare_languages(self, expression1, expression2):
        #Q3
        """
        Compare two regular expressions to check if they generate the same language.

        :param expression1: The first regular expression.
        :param expression2: The second regular expression.
        :return: True if the languages generated by the two expressions are the same, False otherwise.
        """

    def language_relation(self, expression1, expression2):
        #Q4
        """
        Check the relationship between two regular languages.

        :param expression1: The first regular expression.
        :param expression2: The second regular expression.
        :return: A string indicating the relationship (subset, superset, equal, or none).
        """
